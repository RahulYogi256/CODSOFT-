# -*- coding: utf-8 -*-
"""IRIS FLOWER CLASSIFICATION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OraEOMU9cdwux7oEdIOv8ao81nSe2kF6
"""

import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

df = sns.load_dataset('iris')
df.head()

df['species'],categories =pd.factorize(df['species'])
df.head()

df.describe()

df.isna().sum()

from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(df.petal_length,df.petal_width,df.species)
ax.set_xlabel('petallengthcm')
ax.set_ylabel('petalwidthcm')
ax.set_zlabel('species')
plt.title('3D Scatter Plot Example')
plt.show()

from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(df.sepal_length, df.sepal_width,df.species)
ax.set_xlabel('sepallengthcm')
ax.set_ylabel('sepalwidthcm')
ax.set_zlabel('species')
plt.title('3D Scatter Plot Example')
plt.show()

sns.scatterplot(data=df ,x= "sepal_length",y= "sepal_width",hue="species");

sns.scatterplot(data=df ,x="petal_length", y = "petal_width",hue="species");

k_rng = range(1,10)
sse=[]

for k in k_rng:
    km = KMeans(n_clusters=k)
    km.fit(df[['petal_length', 'petal_width']])
    sse.append(km.inertia_)

sse

plt.xlabel('k_rng')
plt.ylabel("sum of square errors")
plt.plot(k_rng,sse)

km = KMeans(n_clusters=3,random_state=0,)
y_predicted = km.fit_predict(df[['petal_length', 'petal_width']])
y_predicted

df['cluster']=y_predicted
df.head()

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(df.species , df.cluster)
cm

true_labels =df.species
predicted_labels =df.cluster

cm = confusion_matrix(true_labels, predicted_labels)
class_labels = ['sentosa','vericolor','virginica']

#plot confusion matrix
plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
plt.title('confusion Matrix')
plt.colorbar()
tick_marks = np.arange(len(class_labels))
plt.xticks(tick_marks, class_labels)
plt.yticks(tick_marks, class_labels)

# fill matrix with values
for i in range(len(class_labels)):
  for j in range(len(class_labels)):
    plt.text(j , i, str(cm[i][j]), ha='center', va='center', color='white')

    plt.xlabel('Predicted label')
    plt.ylabel('True label')
    plt.show()

